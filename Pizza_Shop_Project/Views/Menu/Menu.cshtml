@model DAL.ViewModels.MenuViewModel
<!-- Menu text  -->
<div class="user-text bg-light fs-3 pt-4 fw-bold  pb-3 ps-md-4">Menu</div>

<div class="tabs bg-light d-flex justify-content-between">

    <div class="container-fluid ps-3 pe-3">

        <!-- List of Item and Modifier -->
        <div class="bg-white shadow-sm pt-2">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item " role="presentation">
                    <button class="nav-link active fw-semibold text-dark" id="home-tab" data-bs-toggle="tab"
                        data-bs-target="#home-tab-pane" type="button" role="tab" aria-controls="home-tab-pane"
                        aria-selected="true"><i class="bi bi-list-check pe-2 pb-1"></i>Items</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link fw-semibold text-dark" id="profile-tab" data-bs-toggle="tab"
                        data-bs-target="#profile-tab-pane" type="button" role="tab" aria-controls="profile-tab-pane"
                        aria-selected="false"><i class="bi bi-ui-checks-grid  pe-2 pb-1"></i>Modifiers</button>
                </li>
            </ul>
        </div>

        <!-- Both the Tabs -->
        <div class="Both-tab tab-content bg-white shadow-lg" id="myTabContent">

            <!-- Item -->
            <div class="tab-pane fade show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab">

                <div class="row d-flex m-1 ms-0 me-0">

                    @* Left-SideBar-Item *@
                    <div class="left-sidebar-category-main-div bg-opacity-10 col-xl-2 col-lg-3 col-md-4 col-sm-12 ps-0 pe-0 pb-3 border border-primary border-bottom-0 border-end-1 border-start-0 border-top-0 "
                        style=" background-color: rgb(249, 249, 249);">

                        <div class="user-text p-3 d-flex justify-content-between">
                            <span class="fw-bold fs-5">Category</span>
                            <i class="fa-regular fa-square-plus fs-4 user-text" data-bs-toggle="modal"
                                data-bs-target="#exampleModal-addCategory" onclick="RemoveValidation()"></i>
                        </div>

                        <!-- Categories -->
                        @{
                            int index = 0;
                        }
                        <div style="overflow-y:scroll; height:260px;">

                            @foreach (var item in Model.categoryList)
                            {
                                <a class="CategoryGet @(index==0 ? "active-category" : "") d-flex align-items-center justify-content-between col-12 p-2 ps-3 text-decoration-none text-secondary"
                                    data-id="@item.CategoryId" id="Cat_id">

                                    <div class="d-flex justify-content-start">
                                        <i class="fa-solid fa-grip-vertical me-2 mt-1"></i>
                                        <p class="mt-1">@item.CategoryName</p>
                                    </div>

                                    <div class="d-flex text-secondary justify-content-end">
                                        <input type="hidden" value="@item.Description">
                                        <i class="fa-solid fa-pen me-2 text-secondary"
                                            onclick="GetDetailsForCategoryUpdate(this)" data-id="@item.CategoryId"
                                            data-bs-toggle="modal" data-bs-target="#exampleModal-editCategory"></i>
                                        <i class="fa-solid fa-trash-can text-secondary"
                                            onclick="GetIdForDeleteCategory(this)" data-id="@item.CategoryId"
                                            data-bs-toggle="modal" data-bs-target="#exampleModal-deleteCategory"></i>
                                    </div>

                                </a>
                                index++;
                            }

                        </div>
                    </div>

                    @* Right-SideBar-Item *@
                    <div class="right-side-table-div bg-white pt-3 com-sm-12 col-md-8 col-lg-9 col-xl-10 col-12 ">
                        <div class="menu-text fs-3 fw-bold user-text">Items</div>
                        <div class="search-adduser-div d-flex justify-content-end pb-2 align-items-center gap-2">
                            <div class="search-button pt-2">
                                <input type="text" id="searchbtn-item" placeholder="Search" class=" p-sm-1 border ">
                                <i class="fa-solid fa-magnifying-glass search-icon-item "></i>
                            </div>

                            <div class="trash-button-item pt-2">
                                <button disabled id="MassDeleteItemsBtn" class="btn p-1 ps-2 pe-2 border"
                                    data-bs-toggle="modal" data-bs-target="#MassDeleteItemsModal"><i
                                        class="fa-solid fa-trash-can "></i></button>
                            </div>
                            <div class="add-user-button pt-2 pe-sm-2 pe-0">
                                <button type="button" id="AddItemId" class="addItemBtn btn solid-btn text-light p-1 "
                                    data-bs-toggle="modal" data-bs-target="#addItemModal">
                                    + <span class="d-none d-md-inline">New Item</span>
                                </button>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table mb-0" id="demo">
                                <thead>
                                    <tr class="border border-top-0 border-end-0 border-start-0 border-dark">
                                        <th scope="col" class="text-start fw-bold"><input
                                                class="form-check-input mt-0 me-3 " type="checkbox"
                                                id="item-main-checkbox" onclick="Item_Main_Checkbox_Select()">Name</th>
                                        <th scope="col" class="text-center fw-bold text-nowrap">Item Type</th>
                                        <th scope="col" class="text-center fw-bold">Rate</th>
                                        <th scope="col" class="text-center fw-bold">Quantity</th>
                                        <th scope="col" class="text-center fw-bold">Available</th>
                                        <th scope="col" class="text-center fw-bold">Action</th>

                                    </tr>
                                </thead>
                                <tbody style="white-space: nowrap;" id="item-list-body">

                                    @*Partial View of Items*@
                                    @await Html.PartialAsync("_ItemPartialView", Model.PaginationForItemByCategory)

                                </tbody>
                            </table>
                        </div>

                        @* Pagination Item div *@
                        <div
                            class="pagination-main-div-item d-flex justify-content-end gap-2 p-3 pt-3 bg-white ps-3 pe-2">

                            <span class="pt-2">Items Per page:</span>

                            <select id="itemselect-item">
                                <option value="3">3</option>
                                <option value="5">5</option>
                                <option value="10">10</option>
                            </select>

                            <span class=" pt-2 ps-1" id="pagination-info-item"></span>
                            <button id="left-arrow-item" class="btn border border-dark bg-light ps-2">&lt;</button>
                            <button id="right-arrow-item" class="btn border border-dark bg-light ps-2">&gt;</button>
                        </div>

                    </div>
                </div>

            </div>

            <!-- MODIFIER  -->
            <div class="tab-pane fade " id="profile-tab-pane" role="tabpanel" aria-labelledby="profile-tab"
                tabindex="1">

                <div class="row d-flex m-1 ms-0 me-0">

                    @* Left-SideBar-Modifier *@
                    <div class="left-sidebar-modifier-main-div bg-opacity-10 col-xl-2 col-lg-3 col-md-4 col-sm-12 ps-0 pe-0 pb-3 border border-primary border-bottom-0 border-end-1
            border-start-0 border-top-0" style="background-color: rgb(249, 249, 249);">

                        <div class="user-text p-3 d-flex justify-content-between">
                            <span class="fw-bold fs-5">Modifier Group</span>
                            <i class="fa-regular fa-square-plus fs-4 user-text" data-bs-toggle="modal"
                                data-bs-target="#AddModifierGroup" onclick="RemoveValidation()"></i>
                        </div>

                        <!-- Modifiers -->

                        @* for loop *@

                        <div id="ModifierGroupList_Partial" style="overflow-y:scroll; height:260px;">

                        </div>
                    </div>

                    @* Right-SideBar-Modifier *@
                    <div class=" right-side-table-div bg-white pt-3 com-sm-12 col-md-8 col-lg-9 col-xl-10 col-12">

                        <div class="menu-text fs-3 fw-bold user-text">Modifiers</div>
                        <div class="search-adduser-div d-flex justify-content-end pb-2 align-items-center gap-2">
                            <div class="search-button pt-2">

                                <input type="hidden" id="Mod_id" value="@Model.modifierGroupList[0].ModifierGrpId">
                                <input type="text" id="searchbtn-modifier" placeholder="Search" class=" p-sm-1 border ">
                                <i class="fa-solid fa-magnifying-glass search-icon-item "></i>

                            </div>

                            <div class="trash-button-modifier pt-2">
                                <button disabled id="MassDeleteModifiersBtn" class="btn p-1 ps-2 pe-2 border"
                                    data-bs-toggle="modal" data-bs-target="#MassDeleteModifiersModal"><i
                                        class="fa-solid fa-trash-can "></i>
                                </button>
                            </div>
                            <div class="add-user-button pt-2 pe-sm-2 pe-0">
                                <button type="button" class="addModifierBtn btn solid-btn text-light p-1"
                                    data-bs-toggle="modal" data-bs-target="#addModifierModal" id="addModifierModalId">
                                    +<span class="d-none d-md-inline">New Modifier</span>
                                </button>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table mb-0" id="demo">
                                <thead>
                                    <tr class="border border-top-0 border-end-0 border-start-0 border-dark">
                                        <th scope="col" class="text-start fw-bold"><input id="modifier-main-checkbox"
                                                class="form-check-input mt-0 me-3 " type="checkbox"
                                                onclick="Modifier_Main_Checkbox_Select()">Name</th>
                                        <th scope="col" class="text-center fw-bold">Unit</th>
                                        <th scope="col" class="text-center fw-bold">Rate</th>
                                        <th scope="col" class="text-center fw-bold">Quantity</th>
                                        <th scope="col" class="text-center fw-bold">Action</th>
                                    </tr>
                                </thead>
                                <tbody style="white-space: nowrap;" id="modifier-list-body">
                                    @* @await Html.PartialAsync("_ModifierPartial",
                                    Model.PaginationForModifiersByModGroups) *@
                                </tbody>
                            </table>
                        </div>
                        @* Pagination Modifier div *@
                        <div
                            class="pagination-main-div-modifier d-flex justify-content-end gap-2 p-3 pt-3 bg-white ps-3 pe-2">

                            <span class="pt-2">Items Per page:</span>

                            <select id="itemselect-modifier">
                                <option value="3">3</option>
                                <option value="5">5</option>
                                <option value="10">10</option>
                            </select>

                            <span class=" pt-2 ps-1" id="pagination-info-modifier"></span>
                            <button id="left-arrow-modifier" class="btn border border-dark bg-light ps-2">&lt;</button>
                            <button id="right-arrow-modifier" class="btn border border-dark bg-light ps-2">&gt;</button>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>
</div>

@*----------------------------------------------------------------------*@
@*--------------------------All Modals Are Here-------------------------*@
@*----------------------------------------------------------------------*@

<!------------------------------------ Category ---------------------------------------->

<!-- Add categorty modal  -->
<div class="modal fade" id="exampleModal-addCategory" tabindex="-1" aria-labelledby="exampleModalLabel"
    data-bs-backdrop="static" data-bs-keyboard="false" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5 fw-bold text-secondary" id="exampleModalLabel">Add Category</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="AddCategory" asp-Controller="Menu" method="post">
                <div class="modal-body">
                    <div class="form-floating mb-3">
                        <input type="text" asp-for="@Model.category.CategoryName" class="form-control"
                            id="floatingInput" placeholder="First Name" required>
                        <span asp-validation-for="@Model.category.CategoryName"
                            class="text-danger validate RemoveValidationClass"></span>
                        <label for="floatingInput" class="fs-6 text-secondary">Name</label>
                    </div>

                    <div class="form-floating ">
                        <input type="text" asp-for="@Model.category.Description" class="form-control" id="floatingInput"
                            placeholder="Last Name">
                        <label for="floatingInput" class="fs-6 text-secondary">Description</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn solid-btn">Save</button>
                    <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit category modal -->
<div id="exampleModal-editCategory" class="modal fade" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                    onclick="RemoveValidation()"></button>
            </div>
            <form asp-action="EditCategoryById" asp-controller="Menu">
                <div class="modal-body">
                    <div class="form-floating mb-3">
                        <input type="hidden" asp-for="@Model.category.CategoryId" id="category-id">
                        <input type="text" class="form-control" id="category-name"
                            asp-for="@Model.category.CategoryName" placeholder="Name*" required>
                        <span asp-validation-for="@Model.category.CategoryName"
                            class="text-danger validate RemoveValidationClass"></span>

                        <label for="category-name">Name</label>
                    </div>
                    <div class="form-floating">
                        <textarea class="form-control" placeholder="Leave a comment here"
                            asp-for="@Model.category.Description" id="category-description"></textarea>
                        <label for="category-description">Description</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" id="updatebtn" class="btn solid-btn">Save</button>
                    <button type="button" class="btn hollow-btn" data-bs-dismiss="modal"
                        onclick="RemoveValidation()">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete category Modal-->
<div id="exampleModal-deleteCategory" class="modal fade" tabindex="-1" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Conformation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column mb-2 align-items-center">
                    <img src="../images/toppng.com-warning-icon-2400x2400.png" width="50px" alt="">
                    <p>Are you sure you want to delete this Category?</p>
                </div>
            </div>
            <form asp-action="DeleteCategory" asp-controller="Menu">
                <input type="hidden" asp-for="@Model.category.CategoryId" id="category-id-for-delete" name="Cat_Id">
                <div class="modal-footer d-flex justify-content-center">
                    <button type="submit" class="btn solid-btn">Yes</button>
                    <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">No</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!------------------------------------ Items ---------------------------------------->

<!-- Add Items modal-->
<div class="modal fade" id="addItemModal" tabindex="-1" aria-labelledby="exampleModalLabel" data-bs-backdrop="static"
    data-bs-keyboard="false">
    <div class="modal-dialog modal-xl modal-dialog-centered" id="AddItemModal-Div">

    </div>
</div>

<!-- Edit Items modal-->
<div class="modal fade" id="EditItemModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-xl modal-dialog-centered" id="EditItemModal-Div">
        <!-- Adding the Data through Ajax Call -->
    </div>
</div>

<!-- Delete Item Modal-->
<div id="delete-item-modal" class="modal fade" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold fs-5 text-secondary">Delete Conformation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="d-flex justify-content-center mb-2">
                    <img src="../images/toppng.com-warning-icon-2400x2400.png" style="width: 30px;" alt="">
                </div>
                <p class="fw-semibold text-secondary text-center mb-3">Are you sure you want to delete this Item ?
                </p>
                <form method="post" asp-action="DeleteItem" asp-controller="Menu">
                    <input type="hidden" id="deleteitemid" name="itemid" />

                    <div class="modal-footer mt-3 d-flex justify-content-center">
                        <button type="submit" class="btn solid-btn">Yes</button>
                        <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">No</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Mass Delete Item Modal-->
<div id="MassDeleteItemsModal" class="modal fade" tabindex="-1" aria-labelledby="exampleModalLabel"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold text-secondary">Delete Conformation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="d-flex justify-content-center"><img src="../images/toppng.com-warning-icon-2400x2400.png"
                    style="width: 30px;" alt=""></div>
            <p class="fw-semibold text-secondary text-center">Are you sure you want to delete all this Item ?</p>
            <div class="modal-footer d-flex justify-content-center">
                <button type="submit" class="btn solid-btn" id="MassDeleteItemsModal_YesButton"
                    data-bs-dismiss="modal">Yes</button>
                <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<!-------------------------------------------- Modifiers Group ------------------------------------------------------------------------>

<!-- Add Modifier Group modal  -->
<div id="AddModifierGroup" data-bs-backdrop="static" data-bs-keyboard="false" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered" id="AddModifierGroupModal-MainDiv">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5 fw-bold text-secondary">Add Modifier Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                    onclick="EmptyFieldsAddModifierGroup(); RemoveValidation();"></button>
            </div>
            <form id="AddModifierGroupForm">
                <div class="modal-body">
                    <div class="form-floating mb-3">
                        <input type="hidden" asp-for="@Model.addModifierGroupVM.Temp_Ids" id="Temp_Ids_HiddenField">
                        <input type="text" asp-for="@Model.addModifierGroupVM.ModifierGrpName" class="form-control"
                            id="AddModifierGroupName" placeholder="Name*" required>
                        <label asp-for="@Model.addModifierGroupVM.ModifierGrpName"
                            for="AddModifierGroupName">Name*</label>
                        <span asp-validation-for="@Model.addModifierGroupVM.ModifierGrpName"
                            class="text-danger validate RemoveValidationClass"></span>
                    </div>
                    <div class="form-floating">
                        <textarea class="form-control" asp-for="@Model.addModifierGroupVM.Desciption"
                            placeholder="Description" id="AddModifierGroupDescription"></textarea>
                        <label for="AddModifierGroupDescription">Description</label>
                    </div>
                    <div class="AddExistingModifier-Div col-5 mt-3 mb-3  d-flex justify-content-center user-text"
                        id="AddExistingModifierText-div" data-bs-toggle="modal" data-bs-target="#AddExistingModifier"
                        onclick="ExistingPaginatedModifierTable()">+ Add
                        Existing
                        Modifiers</div>
                    <div id="ExistingModifiers" class="col-11 mx-auto d-flex row">

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn solid-btn">Save</button>
                    <button type="button" class="btn hollow-btn" data-bs-dismiss="modal"
                        onclick="EmptyFieldsAddModifierGroup(); RemoveValidation();">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Existing Modifier In Adding Modifier Group modal -->
<div id="AddExistingModifier" data-bs-backdrop="static" data-bs-keyboard="false" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5 fw-bold text-secondary">Add Existing Modifier</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                    onclick="DiscardSelectedModifierOnCancel()"></button>
            </div>
            <form id="AddExistModifierFormID">
                <div class="modal-body">
                    <div class="search-button ">

                        @* <input type="hidden" id="modifiergrp-id-items"
                        value="@Model.PaginationForModifiersByModGroups.Items[0].ModifierGrpId"> *@
                        <input type="search" id="searchbtn-existingMod" placeholder="Search" class="p-1 border ">
                        <i class="fa-solid fa-magnifying-glass search-icon-style "></i>

                    </div>
                    <div class="table-main-div table-responsive mt-3 bg-white mx-auto w-100 ">
                        <table class="table" id="demo">
                            <thead>
                                <tr class="fw-bold border border-top-0 border-end-0 border-start-0 border-dark">
                                    <th class="text-start" scope="col"><input type="checkbox"
                                            id="existing-modifier-main-checkbox"
                                            onclick="Existing_Modifier_Main_Checkbox_Select();"
                                            class="form-check-input mt-0 me-3">
                                        Name</th>
                                    <th class="text-start" scope="col">Unit</th>
                                    <th class="text-start" scope="col">Rate</th>
                                    <th class="text-center" scope="col">Quantity</th>
                                </tr>
                            </thead>
                            <tbody id="ExistingModifiersListBody" style="white-space: nowrap;">
                                @* @await Html.PartialAsync("_AddExisingModifierPaginationPartial",
                                Model.Paginationmodifiers) *@
                            </tbody>
                        </table>

                        @* Pagination div *@
                        <div class="pagination-main-div d-flex justify-content-end gap-2 p-3 pt-0 bg-white ">

                            <span class="mt-2">Items Per page:</span>

                            <select id="itemselect-modifier-exists">
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="15">15</option>
                            </select>

                            <span class=" mt-2 ms-1" id="pagination-info-modifier-exists"></span>
                            <button id="left-arrow-modifier-exists"
                                class="btn border border-dark bg-light ms-2">&lt;</button>
                            <button id="right-arrow-modifier-exists"
                                class="btn border border-dark bg-light ms-2">&gt;</button>

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn solid-btn" data-bs-dismiss="modal"
                        onclick="Display_Names_Of_ExistingModifier()">Add</button>
                    <button type="button" class="btn hollow-btn" data-bs-dismiss="modal"
                        onclick="DiscardSelectedModifierOnCancel()">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Modifier Group modal  -->
<div id="EditModifierGroup" data-bs-backdrop="static" data-bs-keyboard="false" class="modal fade" tabindex="-1"
    aria-labelledby="exampleModalLabel">
    <div class="modal-dialog modal-dialog-centered" id="EditModifierGroupModal-MainDiv">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5 fw-bold text-secondary">Edit Modifier Group</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                    onclick="EmptyFieldsEditModifierGroup(); RemoveValidation();"></button>
            </div>
            <form id="EditModifierGroupForm">
                <div class="modal-body">
                    <div class="form-floating mb-3">
                        @* <input type="hidden" asp-for="@Model.addModifierGroupVM.Temp_Ids"
                        id="EditTemp_Ids_HiddenField"> *@
                        <input type="hidden" asp-for="@Model.addModifierGroupVM.ModifierGrpId" id="EditModifierGrpId">
                        <input type="text" asp-for="@Model.addModifierGroupVM.ModifierGrpName" class="form-control"
                            id="EditModifierGroupName" placeholder="Name" required>
                        <label asp-for="@Model.addModifierGroupVM.ModifierGrpName"
                            for="EditModifierGroupName">Name</label>
                        <span asp-validation-for="@Model.addModifierGroupVM.ModifierGrpName"
                            class="text-danger validate RemoveValidationClass"></span>
                    </div>
                    <div class="form-floating">
                        <textarea class="form-control" asp-for="@Model.addModifierGroupVM.Desciption"
                            placeholder="Description" id="EditModifierGroupDescription"></textarea>
                        <label for="EditModifierGroupDescription">Description</label>
                    </div>
                    <div class="EditExistingModifier-Div col-5 mt-3 mb-3  d-flex justify-content-center user-text"
                        id="EditExistingModifierText-div" data-bs-toggle="modal" data-bs-target="#EditExistingModifier"
                        onclick="EditExistingPaginatedModifierTable()">+ Add
                        Existing
                        Modifiers</div>
                    <div id="EditExistingModifiers" class="col-11 mx-auto d-flex row">

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn solid-btn">Save</button>
                    <button type="button" class="btn hollow-btn" data-bs-dismiss="modal"
                        onclick="EmptyFieldsEditModifierGroup();  RemoveValidation();">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Existing Modifier In Editing Modifier Group modal -->
<div id="EditExistingModifier" data-bs-backdrop="static" data-bs-keyboard="false" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5 fw-bold text-secondary">Add Existing Modifier</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                    onclick="DiscardSelectedModifierOnCancel()"></button>
            </div>
            <form id="EditExistModifierFormID">
                <div class="modal-body">
                    <div class="search-button ">

                        @* <input type="hidden" id="edit-modifiergrp-id-items"
                        value="@Model.PaginationForModifiersByModGroups.Items[0].ModifierGrpId"> *@
                        <input type="search" id="edit-searchbtn-existingMod" placeholder="Search" class="p-1 border ">
                        <i class="fa-solid fa-magnifying-glass search-icon-style "></i>

                    </div>
                    <div class="table-main-div table-responsive mt-3 bg-white mx-auto w-100 ">
                        <table class="table" id="demo">
                            <thead>
                                <tr class=" fw-bold border border-top-0 border-end-0 border-start-0 border-dark">
                                    <th class="text-start" scope="col"><input type="checkbox"
                                            id="edit-existing-modifier-main-checkbox"
                                            onclick="Edit_Existing_Modifier_Main_Checkbox_Select();"
                                            class="form-check-input mt-0 me-3">
                                        Name</th>
                                    <th class="text-start" scope="col">Unit</th>
                                    <th class="text-start" scope="col">Rate</th>
                                    <th class="text-center" scope="col">Quantity</th>
                                </tr>
                            </thead>
                            <tbody id="EditExistingModifiersListBody" style="white-space: nowrap;">
                                @* @await Html.PartialAsync("_AddExisingModifierPaginationPartial",
                                Model.Paginationmodifiers) *@
                            </tbody>
                        </table>

                        @* Pagination div *@
                        <div class="pagination-main-div d-flex justify-content-end gap-2 p-3 pt-0 bg-white ">

                            <span class="mt-2">Items Per page:</span>

                            <select id="edit-itemselect-modifier-exists">
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="15">15</option>
                            </select>

                            <span class=" mt-2 ms-1" id="edit-pagination-info-modifier-exists"></span>
                            <button id="edit-left-arrow-modifier-exists"
                                class="btn border border-dark bg-light ms-2">&lt;</button>
                            <button id="edit-right-arrow-modifier-exists"
                                class="btn border border-dark bg-light ms-2">&gt;</button>

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn solid-btn" data-bs-dismiss="modal"
                        onclick="Edit_Display_Names_Of_ExistingModifier()">Add</button>
                    <button type="button" class="btn hollow-btn" data-bs-dismiss="modal"
                        onclick="DiscardSelectedModifierOnCancel()">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete modifierGroup -->
<div id="exampleModal-deleteModifierGroup" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="fw-bold fs-5 text-secondary modal-title">Delete Conformation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="d-flex justify-content-center mb-3"><img
                        src="../images/toppng.com-warning-icon-2400x2400.png" style="width: 30px;" alt=""></div>
                <p class="fw-semibold text-secondary text-center mb-3">Are you sure you want to delete this Modifier
                    Group ?</p>
                <form id="deleteModifierGroupForm">
                    <input type="hidden" asp-for="@Model.modifiergroup.ModifierGrpId" id="modifierGroup-id-for-Delete"
                        name="modgrpid">
                    <div class="modal-footer d-flex justify-content-center">
                        <button type="submit" class="btn solid-btn" data-bs-dismiss="modal">Yes</button>
                        <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">No</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!---------------------------------------------- Modifiers ---------------------------------------------------------------------------->

<!-- Add Modifier Modal -->
<div id="addModifierModal" class="modal fade" tabindex="-1" aria-labelledby="exampleModalLabel"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-lg" id="AddModifierModal-MainDiv">

    </div>
</div>

<!-- Edit Modifier Modal -->
<div id="EditModifierModal" class="modal fade" tabindex="-1" aria-labelledby="exampleModalLabel"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered modal-lg" id="EditModifierModal-MainDiv">

    </div>
</div>

<!-- Delete Modifier Modal-->
<div id="delete-modifier-modal" class="modal fade" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fs-5 fw-bold text-secondary">Delete Conformation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="d-flex justify-content-center mb-3"><img
                        src="../images/toppng.com-warning-icon-2400x2400.png" style="width: 30px;" alt=""></div>
                <p class="fw-semibold text-secondary text-center mb-3">Are you sure you want to delete this Modifier
                    ?
                </p>
                <form id="deleteModifierForm">
                    <input type="hidden" asp-for="@Model.modifiers.ModifierId" id="deletemodifierid" name="modid">
                    <div class="modal-footer mt-3 d-flex justify-content-center">
                        <button type="submit" class="btn solid-btn" data-bs-dismiss="modal">Yes</button>
                        <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">No</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Mass Delete Modifier Modal-->
<div id="MassDeleteModifiersModal" class="modal fade" tabindex="-1" aria-labelledby="exampleModalLabel"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold text-secondary">Delete Conformation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="d-flex justify-content-center"><img src="../images/toppng.com-warning-icon-2400x2400.png"
                    style="width: 30px;" class="mt-2 mb-2" alt=""></div>
            <p class="fw-semibold text-secondary text-center mb-3">Are you sure you want to delete all this
                Modifiers ?
            </p>
            <div class="modal-footer d-flex justify-content-center">
                <button type="submit" class="btn solid-btn" id="MassDeleteModifiersModal_YesButton"
                    data-bs-dismiss="modal">Yes</button>
                <button type="button" class="btn hollow-btn" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<!------------------------------------ End Modals ---------------------------------------->

<partial name="_ValidationScriptsPartial" />
<partial name="_Toaster" />

@section Scripts {

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    @* Display FileName *@
    <script>
        $("#uploadFile-item").change(function () {
            const file = this.files[0];
            $("#browseFileText-item").text(file.name);
        });
    </script>

    @* Toaster Message *@
    <script>
        $(document).ready(function () {
            var successMessage = '@TempData["SuccessMessage"]';
            var errorMessage = '@TempData["ErrorMessage"]';
            toastr.options = {
                "closeButton": true,
                "progressBar": true,
                "timeOut": "2000"
            };
            if (successMessage) {
                toastr.success(successMessage);
            }
            if (errorMessage) {
                toastr.error(errorMessage);
            }
        });
    </script>

    <script>

        // -------------------------------Category------------------------------------------------------

        function RemoveValidation() {
            var list = document.getElementsByClassName("RemoveValidationClass");
            for (var i = 0; i < list.length; i++) {
                list[i].innerHTML = "";
            }
        }

        // Get details for Edit Categories
        function GetDetailsForCategoryUpdate(tag) {
            event.stopPropagation();
            document.getElementById("category-id").value = tag.getAttribute("data-id");
            document.getElementById("category-name").value = tag.parentElement.parentElement.children[0].children[1].innerHTML;
            document.getElementById("category-description").value = tag.parentElement.children[0].value;
        }

        //  Get details for Delete Categories  
        function GetIdForDeleteCategory(tag) {
            document.getElementById("category-id-for-delete").value = tag.getAttribute("data-id");
        }

        // -------------------------------Modifier Group ------------------------------------------------

        //  Get details for Delete Modifier Group  
        function GetIdForDeleteModifierGroup(tag) {
            let modifierGroupIdInput = document.getElementById("modifierGroup-id-for-Delete");
            modifierGroupIdInput.value = tag.getAttribute("data-id");
        }

        // --------------------------------------------------------Items Functions-----------------------------------------------

        // Delete any particular item 
        document.addEventListener('DOMContentLoaded', function () {
            var deleteModalItem = document.getElementById('delete-item-modal');
            deleteModalItem.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var itemid = button.getAttribute('data-id');
                var deleteItemInput = document.getElementById('deleteitemid');
                deleteItemInput.value = itemid;
            });
        });

        // Items Main checkbox tick  
        function Item_Main_Checkbox_Select() {
            var main_checkbox = document.getElementById("item-main-checkbox");
            var sub_checkboxes = document.getElementsByClassName("item-sub-checkbox");
            var MassDeleteItemsBtn = document.getElementById("#MassDeleteItemsBtn");
            if (main_checkbox.checked) {
                for (i = 0; i < sub_checkboxes.length; i++) {
                    sub_checkboxes[i].checked = true;
                }
            }
            if (!main_checkbox.checked) {
                for (i = 0; i < sub_checkboxes.length; i++) {
                    sub_checkboxes[i].checked = false;
                }
            }
            toggleMassDeleteBtn();
        }

        // Toggle Mass Delete Button for Items
        function toggleMassDeleteBtn() {
            var sub_checkboxes = document.getElementsByClassName("item-sub-checkbox");
            var MassDeleteItemsBtn = document.getElementById("MassDeleteItemsBtn");
            var anyChecked = false;

            for (i = 0; i < sub_checkboxes.length; i++) {
                if (sub_checkboxes[i].checked) {
                    anyChecked = true;
                    break;
                }
            }
            MassDeleteItemsBtn.disabled = !anyChecked;
        }

        // Apply Toggle on sub_checkboxes of Items
        document.addEventListener('DOMContentLoaded', (event) => {
            var sub_checkboxes = document.getElementsByClassName("item-sub-checkbox");
            for (i = 0; i < sub_checkboxes.length; i++) {
                sub_checkboxes[i].addEventListener('change', toggleMassDeleteBtn);
            }
        });

        // Checkbox tick Manage  
        function CheckBoxTickManage() {
            var main_checkbox = document.getElementById("item-main-checkbox");
            var sub_checkboxes = document.getElementsByClassName("item-sub-checkbox");
            flag = true;
            for (i = 0; i < sub_checkboxes.length; i++) {
                if (!sub_checkboxes[i].checked) {
                    flag = false;
                }
            }
            main_checkbox.checked = flag
            toggleMassDeleteBtn();
        }

        // --------------------------------------------------------Modifiers Functions------------------------------------------------------

        //  Get details for Delete Modifier   
        function GetIdForDeleteModifierItem(tag) {
            let modifierIdInput = document.getElementById("deletemodifierid");
            modifierIdInput.value = tag.getAttribute("data-id");
        }

        // Modifier Main checkbox tick  
        function Modifier_Main_Checkbox_Select() {
            var main_checkbox = document.getElementById("modifier-main-checkbox");
            var sub_checkboxes = document.getElementsByClassName("modifier-sub-checkbox");
            var MassDeleteModifiersBtn = document.getElementById("#MassDeleteModifiersBtn");
            if (main_checkbox.checked) {
                for (i = 0; i < sub_checkboxes.length; i++) {
                    sub_checkboxes[i].checked = true;
                }
            }
            if (!main_checkbox.checked) {
                for (i = 0; i < sub_checkboxes.length; i++) {
                    sub_checkboxes[i].checked = false;
                }
            }
            toggleMassDeleteBtnMod();
        }

        // Modifier Mass Delete Button for Items
        function toggleMassDeleteBtnMod() {
            var sub_checkboxes = document.getElementsByClassName("modifier-sub-checkbox");
            var MassDeleteModifiersBtn = document.getElementById("MassDeleteModifiersBtn");
            var anyChecked = false;

            for (i = 0; i < sub_checkboxes.length; i++) {
                if (sub_checkboxes[i].checked) {
                    anyChecked = true;
                    break;
                }
            }

            MassDeleteModifiersBtn.disabled = !anyChecked;
        }

        // Modifier Toggle on sub_checkboxes of Items
        document.addEventListener('DOMContentLoaded', (event) => {
            var sub_checkboxes = document.getElementsByClassName("modifier-sub-checkbox");
            for (i = 0; i < sub_checkboxes.length; i++) {
                sub_checkboxes[i].addEventListener('change', toggleMassDeleteBtnMod);
            }
        });

        // Modifier Checkbox tick Manage  
        function CheckBoxTickManageMod() {
            var main_checkbox = document.getElementById("modifier-main-checkbox");
            var sub_checkboxes = document.getElementsByClassName("modifier-sub-checkbox");
            flag = true;
            for (i = 0; i < sub_checkboxes.length; i++) {
                if (!sub_checkboxes[i].checked) {
                    flag = false;
                }
            }
            main_checkbox.checked = flag
            toggleMassDeleteBtnMod();
        }

        // --------------------------------------------------------Add Existing Modifiers-----------------------------------------------

        // Existing Modifier Main checkbox tick  
        function Existing_Modifier_Main_Checkbox_Select() {
            var main_checkbox = document.getElementById("existing-modifier-main-checkbox");
            var sub_checkboxes = document.getElementsByClassName("existing-modifier-sub-checkbox");
            if (main_checkbox.checked) {
                for (i = 0; i < sub_checkboxes.length; i++) {
                    sub_checkboxes[i].checked = true;
                    Existing_Modifiers_Selected(sub_checkboxes[i]);
                }
            }
            if (!main_checkbox.checked) {
                for (i = 0; i < sub_checkboxes.length; i++) {
                    sub_checkboxes[i].checked = false;
                    Existing_Modifiers_Selected(sub_checkboxes[i]);
                }
            }
        }

        // Existing Modifier Checkbox tick Manage
        function CheckBoxTickManageModExist() {
            var main_checkbox = document.getElementById("existing-modifier-main-checkbox");
            var edit_main_checkbox = document.getElementById("edit-existing-modifier-main-checkbox");
            var sub_checkboxes = document.getElementsByClassName("existing-modifier-sub-checkbox");
            flag = true;
            for (i = 0; i < sub_checkboxes.length; i++) {
                if (!sub_checkboxes[i].checked) {
                    flag = false;
                }
            }
            edit_main_checkbox.checked = flag;
            main_checkbox.checked = flag;
        }

        // To Empty the fields of Add Modifier Group Modal
        function EmptyFieldsAddModifierGroup() {
            modifierTempId = [];
            modifierTempName = [];
            modifierTempIdCancel = [];
            modifierTempNameCancel = [];
            document.getElementById("Temp_Ids_HiddenField").value = "";
            document.getElementById("AddModifierGroupName").value = "";
            document.getElementById("AddModifierGroupDescription").value = "";
            document.getElementById("ExistingModifiers").innerHTML = "";
        }

        // Method to show selected existing modifier in First add Modifier Group Modal
        function Display_Names_Of_ExistingModifier() {

            modifierTempIdCancel = [];
            modifierTempNameCancel = [];

            for (i = 0; i < modifierTempId.length; i++) {
                if (modifierTempIdCancel.indexOf(modifierTempId[i]) == -1) {
                    modifierTempIdCancel.push(modifierTempId[i]);
                    modifierTempNameCancel.push(modifierTempName[i]);
                }
            }

            var modifier_div = document.getElementById("ExistingModifiers");

            modifier_div.innerHTML = "";
            for (i = 0; i < modifierTempId.length; i++) {
                modifier_div.innerHTML += `<div class="p-1 border border-1 rounded-pill ms-1 mb-2 me-2 d-inline justify-content-between align-items-center" style="max-width:fit-content;">
                                                                                                                                                                                                                                                                                                                                                                                                                                     ${modifierTempName[i]} <i class="fa-solid fa-xmark" style="margin-left: 0px;" onclick="RemoveFromExistingModifierList(${modifierTempId[i]},'${modifierTempName[i]}')"></i></div> `
            }
        }

        // Method when checkbox of existing modifier is ticked
        function Existing_Modifiers_Selected(tag) {

            var id = tag.getAttribute("data-checkid");
            var name = tag.parentElement.children[1].innerHTML;

            if (tag.checked) {
                if (modifierTempName.indexOf(name) == -1) {
                    modifierTempId.push(parseInt(id));
                    modifierTempName.push(name);
                }
            }
            else {
                modifierTempId.splice(modifierTempId.indexOf(id), 1);
                modifierTempName.splice(modifierTempName.indexOf(name), 1);
            }
        }

        // Method to remove selected existing modifier from list
        function RemoveFromExistingModifierList(id, name) {

            modifierTempId.splice(modifierTempId.indexOf(id), 1);
            modifierTempName.splice(modifierTempName.indexOf(name), 1);

            modifierTempIdCancel.splice(modifierTempIdCancel.indexOf(id), 1);
            modifierTempNameCancel.splice(modifierTempNameCancel.indexOf(name), 1);

            Display_Names_Of_ExistingModifier();
        }

        // --------------------------------------------------------Edit Existing Modifiers-----------------------------------------------

        // Edit Existing Modifier Main checkbox tick  
        function Edit_Existing_Modifier_Main_Checkbox_Select() {

            var main_checkbox = document.getElementById("edit-existing-modifier-main-checkbox");
            var sub_checkboxes = document.getElementsByClassName("existing-modifier-sub-checkbox");

            if (main_checkbox.checked) {
                for (i = 0; i < sub_checkboxes.length; i++) {
                    sub_checkboxes[i].checked = true;
                    Existing_Modifiers_Selected(sub_checkboxes[i]);
                }
            }
            if (!main_checkbox.checked) {
                for (i = 0; i < sub_checkboxes.length; i++) {
                    sub_checkboxes[i].checked = false;
                    Existing_Modifiers_Selected(sub_checkboxes[i]);
                }
            }
        }

        // To Empty the fields of Add Modifier Group Modal
        function EmptyFieldsEditModifierGroup() {
            modifierTempId = [];
            modifierTempName = [];
            editmodifierTempId = [];
            modifierTempIdCancel = [];
            modifierTempNameCancel = [];
            document.getElementById("EditModifierGroupName").value = "";
            document.getElementById("EditModifierGroupDescription").value = "";
            document.getElementById("EditExistingModifiers").innerHTML = "";
        }

        // Method to show selected existing modifier in First add Modifier Group Modal
        function Edit_Display_Names_Of_ExistingModifier() {

            modifierTempIdCancel = [];
            modifierTempNameCancel = [];

            for (i = 0; i < modifierTempId.length; i++) {
                if (modifierTempIdCancel.indexOf(modifierTempId[i]) == -1) {
                    modifierTempIdCancel.push(modifierTempId[i]);
                    modifierTempNameCancel.push(modifierTempName[i]);
                }
            }

            var edit_modifier_div = document.getElementById("EditExistingModifiers");

            edit_modifier_div.innerHTML = "";

            for (i = 0; i < modifierTempId.length; i++) {
                edit_modifier_div.innerHTML += `<div class="p-1 border border-1 rounded-pill ms-1 mb-2 me-2 d-inline justify-content-between align-items-center" style="max-width:fit-content;">
                                                                                                                                                                    ${modifierTempName[i]} <i class="fa-solid fa-xmark" style="margin-left: 0px;" onclick="EditRemoveFromExistingModifierList(\`${modifierTempId[i]}\`,\`${modifierTempName[i]}\`)"></i></div> `
            }

        }

        // Method to remove selected existing modifier from list
        function EditRemoveFromExistingModifierList(id, name) {

            modifierTempId.splice(modifierTempId.indexOf(parseInt(id)), 1);
            modifierTempName.splice(modifierTempName.indexOf(name), 1);

            modifierTempIdCancel.splice(modifierTempIdCancel.indexOf(id), 1);
            modifierTempNameCancel.splice(modifierTempNameCancel.indexOf(name), 1);

            Edit_Display_Names_Of_ExistingModifier();
        }

    </script>

    <script>

        // All Data for Items
        let currentPage = 1;
        let searchText = "";
        let pageSize = $("#itemselect-item").val();
        let catid = $("#Cat_id").data("id");

        // All Data for Modifiers
        let currentPage_mod = 1;
        let searchText_mod = "";
        let pageSize_mod = $("#itemselect-modifier").val();
        let modgrpid = $("#Mod_id").val();

        // All Data for Add Existing Modifiers
        let currentPage_Existmod = 1;
        let searchText_Existmod = "";
        let pageSize_Existmod = $("#itemselect-modifier-exists").val();

        // All Data for Edit Existing Modifiers
        let currentPage_Existmodedit = 1;
        let searchText_Existmodedit = "";
        let pageSize_Existmodedit = $("#edit-itemselect-modifier-exists").val();

        // Some Initialization
        let modifierTempId = [];
        let modifierTempName = [];
        let editmodifierTempId = [];
        let modifierTempIdCancel = [];
        let modifierTempNameCancel = [];

        // Items Pagination function
        function PaginatedItemTable(catid, search = "", page = 1, pageSize = 3) {
            $.ajax({
                url: "/Menu/PaginationMenuItemsByCategory",
                type: "GET",
                data: { catid, search, pageNumber: page, pageSize },
                success: function (data) {

                    $("#item-list-body").html(data);

                    currentPage = page;
                    pageSize = parseInt(pageSize);

                    var totalRecords = parseInt($("#totalRecordsHidden-item").val()) || 0;

                    var startItem = totalRecords === 0 ? 0 : (currentPage - 1) * pageSize + 1;

                    var endItem = Math.min(currentPage * pageSize, totalRecords);

                    $("#pagination-info-item").text("Showing " + startItem + " - " + endItem + " of " + totalRecords);
                    $("#left-arrow-item").prop("disabled", currentPage === 1);
                    $("#right-arrow-item").prop("disabled", currentPage * pageSize >= totalRecords);

                    $("#item-main-checkbox").prop("checked", false);
                }
            });
        }

        // Modifiers Pagination function
        function PaginatedModifierTable(modgrpid, search = "", page = 1, pageSize = 3) {
            $.ajax({
                url: "/Menu/PaginationMenuModifiersByModGroups",
                type: "GET",
                data: { modgrpid, search, pageNumber: page, pageSize },
                success: function (data) {

                    $("#modifier-list-body").html(data);

                    currentPage_mod = page;
                    pageSize_mod = parseInt(pageSize_mod);
                    var totalRecords_mod = parseInt($("#totalRecordsHidden-modifier").val()) || 0;

                    var startItem_mod = totalRecords_mod === 0 ? 0 : (currentPage_mod - 1) * pageSize_mod + 1;

                    var endItem_mod = Math.min(currentPage_mod * pageSize_mod, totalRecords_mod);

                    $("#pagination-info-modifier").text("Showing " + startItem_mod + " - " + endItem_mod + " of " + totalRecords_mod);
                    $("#left-arrow-modifier").prop("disabled", currentPage_mod === 1);
                    $("#right-arrow-modifier").prop("disabled", currentPage_mod * pageSize_mod >= totalRecords_mod);

                    $("#modifier-main-checkbox").prop("checked", false);
                }
            });
        }

        // Existing Modifiers Pagination function
        function ExistingPaginatedModifierTable(search = "", page = 1, pageSize = 5) {
            pageSize = parseInt(pageSize_Existmod);
            console.log(pageSize, "PageSize adsddddd");
            $.ajax({
                url: "/Menu/ExistingPaginationMenuModifiersByModGroups",
                type: "GET",
                data: { search, pageNumber: page, pageSize },
                success: function (data) {

                    document.getElementById("existing-modifier-main-checkbox").checked = false;
                    document.getElementById("ExistingModifiersListBody").innerHTML = data;

                    currentPage_Existmod = page;
                    pageSize_Existmod = parseInt(pageSize_Existmod);

                    var totalRecords_Existmod = parseInt($("#totalRecordsHidden-modifier-exists").val()) || 0;

                    var startItem_Existmod = totalRecords_Existmod === 0 ? 0 : (currentPage_Existmod - 1) * pageSize_Existmod + 1;

                    var endItem_Existmod = Math.min(currentPage_Existmod * pageSize_Existmod, totalRecords_Existmod);

                    $("#pagination-info-modifier-exists").text("Showing " + startItem_Existmod + " - " + endItem_Existmod + " of " + totalRecords_Existmod);
                    $("#left-arrow-modifier-exists").prop("disabled", currentPage_Existmod === 1);
                    $("#right-arrow-modifier-exists").prop("disabled", currentPage_Existmod * pageSize_Existmod >= totalRecords_Existmod);

                    $("#existing-modifier-main-checkbox").prop("disabled", false);

                    modifierTempId.forEach(
                        id => {
                            var isData = document.getElementById(`modifier-${id}`);
                            if (isData != null) {
                                isData.checked = true;
                            }
                        }
                    )

                }
            });
        }

        // Edit Existing Modifiers Pagination function
        function EditExistingPaginatedModifierTable(search = "", page = 1, pageSize = 5) {

            pageSize = parseInt(pageSize_Existmodedit);
            console.log(pageSize, "PageSize");

            $.ajax({
                url: "/Menu/ExistingPaginationMenuModifiersByModGroups",
                type: "GET",
                data: { search, pageNumber: page, pageSize },
                success: function (data) {
                    console.log("Edit Existing Modifier");
                    document.getElementById("existing-modifier-main-checkbox").checked = false;
                    document.getElementById("EditExistingModifiersListBody").innerHTML = data;

                    currentPage_Existmodedit = page;
                    pageSize_Existmodedit = parseInt(pageSize_Existmodedit);

                    var totalRecords_Existmodedit = parseInt($("#totalRecordsHidden-modifier-exists").val()) || 0;

                    var startItem_Existmodedit = totalRecords_Existmodedit === 0 ? 0 : (currentPage_Existmodedit - 1) * pageSize_Existmodedit + 1;

                    var endItem_Existmodedit = Math.min(currentPage_Existmodedit * pageSize_Existmodedit, totalRecords_Existmodedit);

                    $("#edit-pagination-info-modifier-exists").text("Showing " + startItem_Existmodedit + " - " + endItem_Existmodedit + " of " + totalRecords_Existmodedit);
                    $("#edit-left-arrow-modifier-exists").prop("disabled", currentPage_Existmodedit === 1);
                    $("#edit-right-arrow-modifier-exists").prop("disabled", currentPage_Existmodedit * pageSize_Existmodedit >= totalRecords_Existmodedit);

                    $("#existing-modifier-main-checkbox").prop("disabled", false);

                    modifierTempId.forEach(
                        id => {
                            var isData = document.getElementById(`modifier-${id}`);
                            if (isData != null) {
                                isData.checked = true;
                            }
                        }
                    )
                }
            });
        }

        // GET Method of Edit Modifier Group
        function GetDetailsForModifierGroupEdit(tag) {

            var modgrpid = tag.getAttribute("data-id");

            $.ajax({
                url: `/Menu/GetModifierGroupByModifierGroupId?modgrpid=${modgrpid}`,
                type: "GET",
                success: function (data) {

                    data.modifiers.forEach(x => {
                        modifierTempId.push(x.modifierId);
                        modifierTempName.push(x.modifierName);
                        editmodifierTempId.push(x.modifierId);
                        modifierTempIdCancel.push(x.modifierId);
                        modifierTempNameCancel.push(x.modifierName);
                    });

                    document.getElementById("EditModifierGrpId").value = data.modifierGroup.modifierGrpId;
                    document.getElementById("EditModifierGroupName").value = data.modifierGroup.modifierGrpName;
                    document.getElementById("EditModifierGroupDescription").value = data.modifierGroup.desciption;

                    Edit_Display_Names_Of_ExistingModifier();
                }
            });
        }

        // To show the ModifierGroup List
        function loadModifierGroupList() {
            console.log("Modifier Group");

            var modgrpid = @Model.modifierGroupList[0].ModifierGrpId;

            $.ajax({
                url: "/Menu/GetAllModifierGroupList",
                type: "GET",
                success: function (data) {
                    document.getElementById("ModifierGroupList_Partial").innerHTML = data;
                    PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);

                }
            })
        }

        // Discard changes on Cancel
        function DiscardSelectedModifierOnCancel() {
            modifierTempId = [];
            modifierTempName = [];
            for (i = 0; i < modifierTempIdCancel.length; i++) {
                modifierTempId.push(modifierTempIdCancel[i]);
                modifierTempName.push(modifierTempNameCancel[i]);
            }
        }

        $(document).ready(function () {

            PaginatedItemTable(catid, searchText, currentPage, pageSize);

            PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);

            loadModifierGroupList();

            // Items search-button
            $("#searchbtn-item").on("keyup", function () {
                searchText = $(this).val().trim();
                currentPage = 1;
                PaginatedItemTable(catid, searchText, currentPage, pageSize);
                Item_Main_Checkbox_Select();
            });

            // Category click
            $(".CategoryGet").on("click", function () {
                $(".CategoryGet").removeClass("active-category");
                $(this).addClass("active-category");
                catid = $(this).data("id");
                currentPage = 1;
                PaginatedItemTable(catid, searchText, currentPage, pageSize);
            });

            // Items Pagination right arrow buttons
            $("#right-arrow-item").on("click", function () {
                let rightarrow = !$(this).prop("disabled");
                if (rightarrow) {
                    currentPage++;
                    PaginatedItemTable(catid, searchText, currentPage, pageSize);
                    Item_Main_Checkbox_Select();
                }
            });

            // Items Pagination left arrow buttons
            $("#left-arrow-item").on("click", function () {
                let leftarrow = !$(this).prop("disabled");
                if (leftarrow) {
                    currentPage--;
                    PaginatedItemTable(catid, searchText, currentPage, pageSize);
                    Item_Main_Checkbox_Select();
                }
            });

            // Items per page dropdown
            $("#itemselect-item").on("change", function () {
                pageSize = $(this).val();
                currentPage = 1;
                PaginatedItemTable(catid, searchText, currentPage, pageSize);
                Item_Main_Checkbox_Select();
            });

            // -----------------------------Items Call Function--------------------------------

            // Add Item Get
            $("#AddItemId").on('click', function () {
                $.ajax({
                    url: "/Menu/GetItems",
                    type: "GET",
                    success: function (data) {
                        $("#AddItemModal-Div").html(data);
                    }
                });
            });

            // Items To Fill data in the Add modal 
            $("#AddItemForm").on("submit", function (e) {
                e.preventDefault();
                let formData = new FormData(this);
                formData.append('itemData', JSON.stringify(itemData));

                $.ajax({
                    url: "/Menu/AddItem",
                    type: "POST",
                    contentType: false,
                    processData: false,
                    data: formData,
                    success: function (data) {
                        if (data.success) {
                            callSuccessToaster(data.text);
                        } else {
                            callErrorToaster(data.text);
                        }
                        $(".btn-close").click();
                        PaginatedItemTable(catid, searchText, currentPage, pageSize);
                        Item_Main_Checkbox_Select();
                    }
                });
            });

            // Items To Show data in the edit modal
            $("#EditItemModal").on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var itemid = button.data("id");
                if (itemid != null) {
                    $.ajax({
                        url: "/Menu/GetItemsByItemId",
                        type: "GET",
                        data: { itemid },
                        success: function (data) {
                            $("#EditItemModal-Div").html(data);
                        }
                    });
                }
            });

            // Items Mass Delete Item Modal Yes Button 
            $("#MassDeleteItemsModal_YesButton").on("click", function () {
                var sub_checkboxes = document.getElementsByClassName("item-sub-checkbox");
                for (i = 0; i < sub_checkboxes.length; i++) {
                    if (sub_checkboxes[i].checked) {

                        let itemID = sub_checkboxes[i].getAttribute("data-checkid");
                        $.ajax({
                            url: `/Menu/DeleteItem?itemID=${itemID}`,
                            type: "GET",
                            success: function (data) {
                                if (data.success) {
                                    callSuccessToaster(data.text);
                                } else {
                                    callErrorToaster(data.text);
                                }
                                $("#MassDeleteItemsBtn").prop("disabled", true);
                                PaginatedItemTable(catid, searchText, currentPage, pageSize);
                            }
                        });
                    }
                }
            });

            // -------------------------------------Modifier--------------------------------------

            // Modifier search-button
            $("#searchbtn-modifier").on("keyup", function () {
                searchText_mod = $(this).val().trim();
                currentPage_mod = 1;
                PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);
                Modifier_Main_Checkbox_Select();
            });

            // ModifierGroup click
            $(document).on("click", ".ModifierGet", function () {
                $(".ModifierGet").removeClass("active-category");
                $(this).addClass("active-category");
                modgrpid = $(this).data("id");
                console.log(modgrpid, "Modgrpid on click");
                currentPage_mod = 1;
                PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);
            });

            // Modifier Pagination right arrow buttons
            $("#right-arrow-modifier").on("click", function () {
                let rightarrow_mod = !$(this).prop("disabled");
                if (rightarrow_mod) {
                    currentPage_mod++;
                    PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);
                    Modifier_Main_Checkbox_Select();
                }
            });

            // Modifier Pagination left arrow buttons
            $("#left-arrow-modifier").on("click", function () {
                let leftarrow_mod = !$(this).prop("disabled");
                if (leftarrow_mod) {
                    currentPage_mod--;
                    PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);
                    Modifier_Main_Checkbox_Select();
                }
            });

            // Modifier per page dropdown
            $("#itemselect-modifier").on("change", function () {
                pageSize_mod = $(this).val();
                currentPage_mod = 1;
                console.log(pageSize_mod);
                PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);
                Modifier_Main_Checkbox_Select();
            });

            // -=----------------------------------------------Existing Modifier-------------------

            // Existing Modifier search-button
            $("#searchbtn-existingMod").on("keyup", function () {
                searchText_Existmod = $(this).val().trim();
                currentPage_Existmod = 1;
                ExistingPaginatedModifierTable(searchText_Existmod, currentPage_Existmod, pageSize_Existmod);
            });

            // Existing Modifier Pagination right arrow buttons
            $("#right-arrow-modifier-exists").on("click", function (e) {
                let rightarrow_modExist = !$(this).prop("disabled");
                if (rightarrow_modExist) {
                    e.preventDefault();
                    currentPage_Existmod++;
                    ExistingPaginatedModifierTable(searchText_Existmod, currentPage_Existmod, pageSize_Existmod);
                }
            });

            // Existing Modifier Pagination left arrow buttons
            $("#left-arrow-modifier-exists").on("click", function (e) {
                let leftarrow_modExist = !$(this).prop("disabled");
                if (leftarrow_modExist) {
                    e.preventDefault();
                    currentPage_Existmod--;
                    ExistingPaginatedModifierTable(searchText_Existmod, currentPage_Existmod, pageSize_Existmod);
                }
            });

            // Existing Modifier items per page dropdown
            $("#itemselect-modifier-exists").on("change", function () {
                pageSize_Existmod = $(this).val();
                currentPage_Existmod = 1;
                ExistingPaginatedModifierTable(searchText_Existmod, currentPage_Existmod, pageSize_Existmod);
            });

            // -----------------------------Modifier Group ------------------------------------

            // Edit Existing Modifier search-button
            $("#edit-searchbtn-existingMod").on("keyup", function () {
                searchText_Existmodedit = $(this).val().trim();
                currentPage_Existmodedit = 1;
                EditExistingPaginatedModifierTable(searchText_Existmodedit, currentPage_Existmodedit, pageSize_Existmodedit);
            });

            // Edit Existing Modifier Pagination right arrow buttons
            $("#edit-right-arrow-modifier-exists").on("click", function (e) {
                let rightarrow_modExistedit = !$(this).prop("disabled");
                if (rightarrow_modExistedit) {
                    e.preventDefault();
                    currentPage_Existmodedit++;
                    EditExistingPaginatedModifierTable(searchText_Existmodedit, currentPage_Existmodedit, pageSize_Existmodedit);
                }
            });

            // Edit Existing Modifier Pagination left arrow buttons
            $("#edit-left-arrow-modifier-exists").on("click", function (e) {
                let leftarrow_modExistedit = !$(this).prop("disabled");
                if (leftarrow_modExistedit) {
                    e.preventDefault();
                    currentPage_Existmodedit--;
                    EditExistingPaginatedModifierTable(searchText_Existmodedit, currentPage_Existmodedit, pageSize_Existmodedit);
                }
            });

            // Edit Existing Modifier Items per page dropdown
            $("#edit-itemselect-modifier-exists").on("change", function () {
                pageSize_Existmodedit = $(this).val();
                currentPage_Existmodedit = 1;
                EditExistingPaginatedModifierTable(searchText_Existmodedit, currentPage_Existmodedit, pageSize_Existmodedit);
            });

            //  Modifier Group CAll Function

            // Add Modifier Group POST 
            $(document).on("submit", "#AddModifierGroupForm", function (e) {

                e.preventDefault();

                document.getElementById("Temp_Ids_HiddenField").value = modifierTempId;

                let form = $("#AddModifierGroupForm");

                if (form.valid()) {

                    let formData = new FormData(this);

                    $.ajax({
                        url: "/Menu/AddModifierGroup",
                        type: "POST",
                        processData: false,
                        contentType: false,
                        data: formData,
                        success: function (data) {
                            if (data.success) {
                                callSuccessToaster(data.text);
                            } else {
                                callErrorToaster(data.text);
                            }
                            $(".btn-close").click();
                            loadModifierGroupList();
                            PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);
                            Existing_Modifier_Main_Checkbox_Select();
                        }
                    });
                }
            });

            //Edit modifier group post method
            $(document).on("submit", "#EditModifierGroupForm", function (e) {

                e.preventDefault();

                let formData = new FormData(this);

                $.ajax({
                    url: `/Menu/EditModifierGroup`,
                    type: "POST",
                    contentType: false,
                    processData: false,
                    data: formData,
                    success: function (data) {

                        for (i = 0; i < editmodifierTempId.length; i++) {

                            if (modifierTempId.indexOf(editmodifierTempId[i]) == -1) {

                                //deleteModifierFromModGrpAfterEdit(modGrpID,editModTempId[i]);

                                $.ajax({
                                    url: `/Menu/DeleteModToModifierGrpAfterEdit?modgrpid=${data.grpId}&modid=${editmodifierTempId[i]}`,
                                    type: "Post",
                                    success: function () {
                                    }
                                });

                            }
                        }

                        for (i = 0; i < modifierTempId.length; i++) {

                            if (editmodifierTempId.indexOf(modifierTempId[i]) == -1) {

                                //addModifierToModGrpAfterEdit(modGrpID,modTempID[i]);

                                $.ajax({
                                    url: `/Menu/AddModToModifierGrpAfterEdit?modgrpid=${data.grpId}&modid=${modifierTempId[i]}`,
                                    type: "post",
                                    success: function () {
                                    }
                                });
                            }
                        }

                        if (data.success) {
                            callSuccessToaster(data.text);
                        } else {
                            callErrorToaster(data.text);
                        }
                        $(".btn-close").click();

                        PaginatedModifierTable(data.grpId, searchText_mod, currentPage_mod, pageSize_mod);
                        loadModifierGroupList();
                        Existing_Modifier_Main_Checkbox_Select();
                        modifierTempId = [];
                        editmodifierTempId = [];
                        modifierTempName = [];
                    }
                });
            });

            // Delete modifier Group POST
            $(document).on("submit", "#deleteModifierGroupForm", function (e) {

                e.preventDefault();

                let modgrpid = document.getElementById("modifierGroup-id-for-Delete").value;
                let modifierGrpidstart = document.getElementById("Mod_id").value;

                $.ajax({
                    url: `/Menu/DeleteModifierGroup`,
                    type: "POST",
                    data: { modgrpid: modgrpid },
                    success: function (data) {
                        if (data.success) {
                            callSuccessToaster(data.text);
                        } else {
                            callErrorToaster(data.text);
                        }
                        $(".btn-close").click();
                        loadModifierGroupList();
                        Existing_Modifier_Main_Checkbox_Select();
                    }
                });
            });

            // -------------------------------------Modifier-------------------------------------- -----------

            // Modifier To Show data in the Add modal GET Method
            $("#addModifierModalId").on('click', function () {
                $.ajax({
                    url: "/Menu/AddModifierItem",
                    type: "GET",
                    success: function (data) {
                        $("#AddModifierModal-MainDiv").html(data);
                    }
                });
            });

            // Modifier To Show data in the edit modal GET
            $("#EditModifierModal").on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget);
                var modid = button.data("id");
                if (modid != null) {
                    $.ajax({
                        url: "/Menu/GetModifiersByModifierId",
                        type: "GET",
                        data: { modid },
                        success: function (data) {
                            $("#EditModifierModal-MainDiv").html(data);
                        }
                    });
                }
            });

            // Modifier Delete Modal POST
            $(document).on("submit", "#deleteModifierForm", function (e) {

                e.preventDefault();

                let modid = document.getElementById("deletemodifierid").value;

                $.ajax({
                    url: "/Menu/DeleteModifier",
                    type: "POST",
                    data: { modid: modid },
                    success: function (data) {
                        if (data.success) {
                            callSuccessToaster(data.text);
                        } else {
                            callErrorToaster(data.text);
                        }
                        $(".btn-close").click();
                        currentPage_mod = 1;
                        PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);
                    }
                });
            });

            // Modifier Mass Delete Modal Yes Button 
            $(document).on("click", "#MassDeleteModifiersModal_YesButton", function () {

                var sub_checkboxes = document.getElementsByClassName("modifier-sub-checkbox");

                for (i = 0; i < sub_checkboxes.length; i++) {
                    if (sub_checkboxes[i].checked) {

                        let modifierID = sub_checkboxes[i].getAttribute("data-checkid");
                        $.ajax({
                            url: `/Menu/DeleteModifier?modid=${modifierID}`,
                            type: "POST",
                            success: function (data) {
                                if (data.success) {
                                    callSuccessToaster(data.text);
                                }
                                else {
                                    callErrorToaster(data.text);
                                }
                                $("#MassDeleteModifiersBtn").prop("disabled", true);
                                currentPage_mod = 1;
                                PaginatedModifierTable(modgrpid, searchText_mod, currentPage_mod, pageSize_mod);
                            }
                        });
                    }
                }
            });

            // end of Ready
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}