@using DAL.ViewModels;
@model DAL.ViewModels.PaginationViewModel<CustomerViewModel>;
@{
    ViewData["Title"] = "Customer";
    Layout = "_Layout";
}

<div class="d-flex flex-column px-3 py-3 gap-3">

    <!-- Search and All -->
    <div class="d-flex flex-lg-row flex-column justify-content-between col">
        <h1 class="fw-bold user-text fs-2 col-lg-4 pb-3">Customers</h1>
        <div class="d-flex flex-sm-row flex-column justify-content-end align-items-center gap-2 col-lg-8">
            <div class="h-100 w-100">
                <input type="text" class="form-control p-3 h-100 dt-input border" id="searchbtn" placeholder="Search"
                    aria-controls="order-list" />
            </div>
            <div class="form-floating w-100">
                <select id="selectRange" class="form-select p-2">
                    <option value="All Time">All Time</option>
                    <option value="Last 7 days">Last 7 days</option>
                    <option value="Last 30 days">Last 30 days</option>
                    <option value="Current Month">Current Month</option>
                    <option value="Custom Date" data-bs-toggle="modal" data-bs-target="#CustomDateModal">Custom Date
                    </option>
                </select>
            </div>
            <button class="solid-btn p-3 h-100 rounded border-0 text-nowrap" id="exportBtn" onclick="ExportBtn()">
                <i class="fa-solid fa-share-from-square"></i> Export
            </button>
        </div>
    </div>

    <!-- Table of order details-->
    <div class="shadow-lg p-2 bg-white rounded">
        <div class="table-responsive p-3">
            <table class="table w-100">
                <thead>
                    <tr class="border-bottom border-dark">
                        <th class="fw-bold text-start text-nowrap">
                            <div class="d-flex">
                                <span class="pt-1">Name</span>
                                <i class="bi bi-arrow-down-up ps-2" id="sortable-name" data-column="Name"
                                    data-direction="asc"></i>
                            </div>
                        </th>
                        <th class="fw-bold text-start">
                            <div class="d-flex">
                                <span class="pt-1">Email</span>

                            </div>
                        </th>
                        <th class="fw-bold text-start text-nowrap">
                            <div class="d-flex">
                                <span class="pt-1">Phone Number</span>

                            </div>
                        </th>
                        <th class="fw-bold text-start text-nowrap">
                            <div class="d-flex">
                                <span class="pt-1">Date</span>
                                <i class="bi bi-arrow-down-up ps-2" id="sortable-date" data-column="Date"
                                    data-direction="asc"></i>
                            </div>
                        </th>
                        <th class="fw-bold text-start text-nowrap">
                            <div class="d-flex">
                                <span class="pt-1 text-nowrap">Total Order</span>
                                <i class="bi bi-arrow-down-up  ps-2" id="sortable-totalOrder" data-column="TotalOrder"
                                    data-direction="asc"></i>
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody id="CustomerListBody">

                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-end gap-2 p-3 pt-0 bg-white align-items-center">
            <span>Items Per page:</span>
            <select id="itemselect" class="border border-secondary">
                <option value="5" selected>5</option>
                <option value="10">10</option>
                <option value="15">15</option>
            </select>
            <span id="pagination-info"></span>
            <button id="left-arrow" class="btn border border-dark bg-light ms-2 d-flex align-items-center">&lt;</button>
            <button id="right-arrow" class="btn border border-dark bg-light ms-2">&gt;</button>
        </div>
    </div>

</div>

<!------------------------------------- Custom Date Modal --------------------------------------------------->

<div id="CustomDateModal" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Custom Date</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                    onclick="EmptyData()"></button>
            </div>
            <form id="CustomDateFormId">
                <div class="modal-body">
                    <div class="d-flex flex-sm-row flex-column gap-sm-3 gap-0">

                        <div class="form-floating  col mb-3">
                            <input type="date" id="from-date" class="form-control">
                            <label>From Date</label>
                        </div>

                        <div class="form-floating  col mb-3">
                            <input type="date" id="to-date" class="form-control">
                            <label>To Date</label>
                        </div>

                    </div>

                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn solid-btn">Save</button>
                    <button type="button" class="btn hollow-btn" onclick="EmptyData();" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!------------------------------------- End of Custom Date Modal --------------------------------------------------->

<partial name="_Toaster" />
<partial name="_ValidationScriptsPartial" />

@section Scripts {

    <script>

        let currentPage = 1;
        let pageSize = $("#itemselect").val();
        let searchText = "";
        let sortColumn = "";
        let sortDirection = "asc"
        let selectRange = $("#selectRange").val();
        let fromDate = "";
        let toDate = "";

        // LoadTable function
        function loadTable(page = 1, search = "", sortColumn = "", sortDirection = "asc", pageSize = 5, fromDate, toDate, selectRange) {
            $.ajax({
                url: "/Customer/PaginationForCustomer",
                type: "GET",
                data: { search, sortColumn, sortDirection, pageNumber: page, pageSize, fromDate, toDate, selectRange },
                success: function (data) {

                    $("#CustomerListBody").html(data);

                    currentPage = page;
                    pageSize = parseInt(pageSize);

                    var totalRecords = parseInt($("#totalRecordsHidden").val()) || 0;

                    var startItem = totalRecords === 0 ? 0 : (currentPage - 1) * pageSize + 1;

                    var endItem = Math.min(currentPage * pageSize, totalRecords);

                    $("#pagination-info").text("Showing " + startItem + " - " + endItem + " of " + totalRecords);
                    $("#left-arrow").prop("disabled", currentPage === 1);
                    $("#right-arrow").prop("disabled", currentPage * pageSize >= totalRecords);
                }
            });
        }

        // Export to Excel Function
        function ExportBtn() {
            searchText = $("#searchbtn").val().trim();
            selectRange = $("#selectRange").val();
            fromDate = $("#from-date").val();
            toDate = $("#to-date").val();
            $.ajax({
                url: "/Customer/ExportCustomerDataToExcel",
                type: "GET",
                data: { search: searchText,fromDate,toDate, selectRange },
                xhrFields: {
                    responseType: 'blob'
                },
                success: function (data, status, xhr) {
                    let filename = "Customers.xlsx";

        @* let disposition = xhr.getResponseHeader('Content-Disposition');
                    if (disposition && disposition.indexOf('attachment') !== -1) {
                    let matches = /filename="([^"]+)"/.exec(disposition);
                    if (matches !== null && matches[1]) filename = matches[1];
                    } *@

                        let blob = new Blob([data], { type: xhr.getResponseHeader('Content-Type') });
                    let link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = filename;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

                    let text = "Excel Exported Successfully"
                    callSuccessToaster(text);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                    let Text = "Failed to Export Excel"
                    callErrorToaster(Text);
                }
            });
        }

        // Empty Fields
        function EmptyData() {
            fromDate = "";
            toDate = "";
        }

        $(document).ready(function () {

            // Search on keyup
            $("#searchbtn").on("keyup", function () {
                searchText = $(this).val().trim();
                currentPage = 1;
                loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
            });

            // Sorting Order functionality
            $("#sortable-name").on("click", function () {
                sortColumn = $(this).data("column");
                console.log(sortColumn);
                sortDirection = $(this).attr("data-direction") === "asc" ? "desc" : "asc";
                $(this).attr("data-direction", sortDirection);
                loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
            });

            // Sorting Date functionality
            $("#sortable-date").on("click", function () {
                sortColumn = $(this).data("column");
                console.log(sortColumn);
                sortDirection = $(this).attr("data-direction") === "asc" ? "desc" : "asc";
                $(this).attr("data-direction", sortDirection);
                loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
            });

            // Sorting Customer functionality
            $("#sortable-totalOrder").on("click", function () {
                sortColumn = $(this).data("column");
                console.log(sortColumn);
                sortDirection = $(this).attr("data-direction") === "asc" ? "desc" : "asc";
                $(this).attr("data-direction", sortDirection);
                loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
            });

            // Right Arrow Key
            $("#right-arrow").on("click", function () {
                let rightarrow = !$(this).prop("disabled");
                if (rightarrow) {
                    currentPage++;
                    loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
                }
            });

            // Left Arrow Key
            $("#left-arrow").on("click", function () {
                let leftarrow = !$(this).prop("disabled");
                if (leftarrow) {
                    currentPage--;
                    loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
                }
            });

            // Item Select
            $("#itemselect").on("change", function () {
                pageSize = $(this).val();
                console.log("items-" + pageSize);
                currentPage = 1;
                loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
            });

            // Select Range
            $("#selectRange").on("change", function () {
                selectRange = $(this).val();
                if (selectRange == "Custom Date") {
                    $("#CustomDateModal").modal("show");
                } else {
                    fromDate = "";
                    toDate = "";
                    currentPage = 1;
                    loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
                }
            });

            // Custom Date Form Submit
            $("#CustomDateFormId").on("submit", function (e) {
                e.preventDefault();
                fromDate = $("#from-date").val();
                toDate = $("#to-date").val();
                currentPage = 1;
                loadTable(currentPage, searchText, sortColumn, sortDirection, pageSize, fromDate, toDate, selectRange);
                EmptyData();
                $(".btn-close").click();
            });

            loadTable();
            // End of Ready
        });
    </script>
}