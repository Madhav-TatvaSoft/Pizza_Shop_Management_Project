@using DAL.ViewModels
@model OrderAppMenuViewModel

@{
    ViewData["Title"] = "Order App Menu";
    Layout = "~/Views/Shared/_OrderAppLayout.cshtml";
    @* var custId = ; *@
}

<div class="d-flex">

    <div class="overlay-category" onclick="toggleSidebarCategory()"></div>

    <div class="bg-white category-toggle-active category-toggle " style="min-height: 885px; width:250px !important;">
        <div class="fs-3 fw-bold   ">
            <div class="p-3 fs-4">Category</div>
        </div>
        <div class="text-secondary fw-bold">
            <div class="category-click  favorite-item-class p-3" data-id="-1" onclick="categorySelected(this)">
                <div class="">Favorite Items </div>
            </div>
            <div class=" category-click orderAppActive p-3" data-id="0" onclick="categorySelected(this)">
                <div class="">All</div>
            </div>
            @foreach (var cat in Model.categoryList)
            {
                <div class="category-click p-3" data-id="@cat.CategoryId" onclick="categorySelected(this)">
                    <div class="">@cat.CategoryName</div>
                </div>
            }
        </div>
    </div>

    <div class="p-sm-3 p-1 w-100">
        <div class="btn d-md-none" onclick="toggleSidebarCategory()"><i class="fa-solid fa-bars-staggered"></i></div>

        <div class="col  d-flex flex-xl-row flex-column p-2">

            <div class="col-12 p-2 @(Model.customerId != 0 ? "col-xl-7":"col-12")">

                @* <div class="col-xl-7 col-12 p-2"> *@

                <div class="d-md-flex col-12 flex-xxl-row flex-column  justify-content-between mb-3">
                    <!-- search btn-->
                    <div class="search-button-orders col-12 col-sm-6 ">

                        <input type="text" id="searchbtn" placeholder="Search" class="p-3 border rounded w-100"
                            onkeyup="searchItem(this.value)">
                        <i class="fa-solid fa-magnifying-glass search-icon-style"
                            style="position: absolute; margin-left: -30px; margin-top: 22px;"></i>

                    </div>
                    <!-- icons-->
                    <div
                        class="d-flex row justify-content-start justify-content-xl-end align-items-center gap-3 pt-xxl-0 pt-3">

                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-success" style="width: 10px; height: 10px;">
                            </div>
                            Vegetarian
                        </div>
                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-danger" style="width: 10px; height: 10px;">
                            </div>
                            Non-Vegetarian
                        </div>
                        <div class="d-flex align-items-center justify-content-center col-auto gap-1 text-nowrap">
                            <div class="rounded-circle bg-warning" style="width: 10px; height: 10px;">
                            </div>
                            Vegan
                        </div>

                    </div>

                </div>
                <div class="ItemCards d-flex flex-wrap justify-content-start gap-3" id="ItemCards">

                    <!-- cards-->
                </div>

            </div>

            <div class="d-none" id="customerId">@Model.customerId</div>
            @if (Model.customerId != 0)
            {
                <div class="col-xl-5 col-12 bg-white p-2 mt-2 rounded-2 shadow-sm" id="OrderDetails-Content">

                </div>
            }
        </div>
    </div>
</div>

<partial name="_ValidationScriptsPartial" />
<partial name="_Toaster" />

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        var categoryid;
        var MainItem = [];
        var TempItem = [];
        var orderDetailsModel;
        var ItemQuantity = [];
        var OrderDetailIds = [];
        var ItemQuantityUpdateFlag = true;
        var IsOrderCompleted = false;
        var IsAllItemSaved = false;
        var PaymentmethodId = 1;
        var IsFirst = true;


        // Toggle Sidebar Category
        function toggleSidebarCategory() {
            document.getElementsByClassName("overlay-category")[0].classList.toggle("overlay-category-active");
            document.getElementsByClassName("category-toggle")[0].classList.toggle("category-toggle-active")
            document.getElementsByClassName("category-toggle")[0].classList.toggle("category-toggle-position")
        }

        // Category Selected
        function categorySelected(tag) {

            categoryid = tag.getAttribute("data-id");

            var categoryclick = document.getElementsByClassName("category-click");

            for (i = 0; i < categoryclick.length; i++) {
                categoryclick[i].classList.remove("orderAppActive");
            }

            tag.classList.add("orderAppActive");

            $.ajax({
                url: "/OrderAppMenu/GetItems",
                type: "GET",
                data: { categoryid },
                success: function (data) {
                    $("#searchbtn").val("");
                    $("#ItemCards").html(data);
                }
            })
        }

        // Search By Item
        function searchItem(searchText) {
            console.log(searchText);
            $.ajax({
                url: "/OrderAppMenu/GetItems",
                type: "GET",
                data: { searchText, categoryid },
                success: function (data) {
                    $("#ItemCards").html(data);
                }
            })
        }

        // Favourite Item
        function FavouriteItem(event, tag) {
            event.stopPropagation();
            var itemId = tag.getAttribute("data-itemId");
            var classes = tag.classList;
            $.ajax({
                url: "/OrderAppMenu/FavouriteItem",
                type: "POST",
                data: { itemId, IsFavourite: classes.contains("fa-regular") ? true : false },
                success: function (res) {
                }
            });
            if (categoryid == -1) {
                setTimeout(() => {
                    $(".favorite-item-class").click();
                }, 100)
            } else {
                classes.toggle("fa-regular");
                classes.toggle("fa-solid");
                classes.toggle("user-text");
            }
        }

        // Get OrderDetails By Customer Id
        function GetOrderDetailsByCustomerId() {
            var customerId = document.getElementById("customerId").innerHTML;
            $.ajax({
                url: "/OrderAppMenu/GetOrderDetailsByCustomerId",
                type: "GET",
                data: { customerId: customerId },
                success: function (data) {
                    $("#OrderDetails-Content").html(data);
                    IsAllItemSaved = true;
                }
            });
        }

        // Backend order items save in array
        function FillAlreadySavedDataInArray(orderDetails) {

            orderDetailsModel = orderDetails;
            console.log(orderDetailsModel, "orderDetail");

            var SubItems = [];
            MainItem = [];
            SubItems = orderDetails.itemOrderVM == null ? [] : orderDetails.itemOrderVM;
            IsOrderCompleted = orderDetailsModel.status == "Completed" ? true : false;


            for (i = 0; i < SubItems.length; i++) {

                var item = [];

                for (j = 0; j < SubItems[i].modifierOrderVM.length; j++) {
                    item.push(parseInt(SubItems[i].modifierOrderVM[j].modifierId));
                }
                item.sort();
                item.unshift(parseInt(SubItems[i].quantity))
                item.unshift(parseInt(SubItems[i].itemId))

                MainItem.push(item);
            }
            if (ItemQuantityUpdateFlag) {
                fillItemQuantity();
                ItemQuantityUpdateFlag = false;
            }

            if (IsFirst) {
                TempItem = [...MainItem];
                IsFirst = false;
            }

        @* if (IsOrderCompleted) {
            document.getElementById("OrderSaveBtn").setAttribute("disabled", "disabled");
            document.getElementById("OrderCompleteBtn").setAttribute("disabled", "disabled");
            document.getElementById("OrderCancelBtn").setAttribute("disabled", "disabled");
            } *@
                }

        // Fill Item Quantity
        function fillItemQuantity() {
            ItemQuantity = [];
            OrderDetailIds = [];
            if (orderDetailsModel.itemOrderVM != null) {
                for (i = 0; i < orderDetailsModel.itemOrderVM.length; i++) {
                    ItemQuantity.push(parseInt(orderDetailsModel.itemOrderVM[i].quantity))
                    OrderDetailIds.push(parseInt(orderDetailsModel.itemOrderVM[i].orderdetailId))
                }
            }
        }

        // Add Item To Order
        function AddItemModifierToList() {
            if (IsOrderCompleted) {
                callErrorToaster("Order is already completed");
                return;
            }
            else {
                IsAllItemSaved = false;
                var selectedModifiers = document.getElementsByClassName("modifierSelected");
                var itemId = document.getElementById("itemIdForOrderDetails").value;
                var item = [];

                for (i = 0; i < selectedModifiers.length; i++) {
                    item.push(parseInt(selectedModifiers[i].getAttribute("data-modifierId")));
                }
                item.sort();
                item.unshift(1);
                item.unshift(parseInt(itemId))

                console.log("item", item);

                var ItemCheckFlag = true;

                MainItem.forEach((x) => {

                    if (x.toString().substr(0, x[0].toString().length + 1) + x.toString().substr(4) == item.toString().substr(0,
                        item[0].toString().length + 1) + item.toString().substr(4) && x[1] < 10) {
                        x[1]++;
                        console.log("x", x[1]);
                        ItemCheckFlag = false;
                    }
                    else if (x[1] == 10) {
                        ItemCheckFlag = false;
                        callErrorToaster("Maximum Quantity already added!");
                    }

                });

                if (ItemCheckFlag) MainItem.push(item);

                console.log("AllItems = ", MainItem);
                console.log("orderDetailsModel = ", orderDetailsModel);

                $.ajax({
                    url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                    type: "GET",
                    data: { ItemList: JSON.stringify(MainItem), orderDetails: JSON.stringify(orderDetailsModel) },
                    success: function (data) {
                        $("#OrderDetails-Content").html(data);
                    }
                })
                $(".btn-close").click();
            }
        }

        // Remove Item from Order
        function RemoveItemFromOrder(itemId, count) {
            if (IsOrderCompleted) {
                callErrorToaster("Order is already completed");
                return;
            }
            else {
                IsAllItemSaved = false;
                MainItem.splice(count, 1);
                $.ajax({
                    url: "/OrderAppMenu/RemoveItemfromOrderDetailPartialView",
                    type: "GET",
                    data: { ItemList: JSON.stringify(MainItem), count, orderDetails: JSON.stringify(orderDetailsModel) },
                    success: function (data) {
                        $("#OrderDetails-Content").html(data);
                    }
                });
            }
        }

        // Minus quantity
        function MinusQuantity(tag, count) {
            if (IsOrderCompleted) {
                callErrorToaster("Order is already completed");
                return;
            }
            else {
                var quantity = parseInt(tag.nextElementSibling.innerText);
                if (parseInt(tag.nextElementSibling.innerText) <= ItemQuantity[count]) {
                    callErrorToaster("Sorry Item is almost ready!");
                    return;
                }
                IsAllItemSaved = false;
                if (quantity > 1) {
                    quantity--;
                    tag.nextElementSibling.innerText = quantity;
                    MainItem[count][1] = quantity;
                    $.ajax({
                        url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                        type: "GET",
                        data: { ItemList: JSON.stringify(MainItem), orderDetails: JSON.stringify(orderDetailsModel) },
                        success: function (data) {
                            $("#OrderDetails-Content").html(data);
                        }
                    });
                }
            }
        }

        // Plus quantity
        function PlusQuantity(tag, count) {
            if (IsOrderCompleted) {
                callErrorToaster("Order is already completed");
                return;
            }
            else {
                IsAllItemSaved = false;
                var quantity = parseInt(tag.previousElementSibling.innerText);
                if (quantity < 10) {
                    quantity++;
                    tag.previousElementSibling.innerText = quantity;
                    MainItem[count][1] = quantity;
                    $.ajax({
                        url: "/OrderAppMenu/UpdateOrderDetailPartialView",
                        type: "GET",
                        data: { ItemList: JSON.stringify(MainItem), orderDetails: JSON.stringify(orderDetailsModel) },
                        success: function (data) {
                            $("#OrderDetails-Content").html(data);
                        }
                    });
                } else {
                    callErrorToaster("You can select maximum 10 quantity");
                }
            }
        }

        // Show Item instruction
        function ShowItemInstruction(tag, count) {
            $("#ItemInstructionCount").val(count);
            document.getElementById("ItemInstructionText").value = orderDetailsModel.itemOrderVM[count].extraInstruction == null ? "" : orderDetailsModel.itemOrderVM[count].extraInstruction;
        }

        // Save Item Instruction
        function StoreItemInstruction() {
            if (IsOrderCompleted) {
                callErrorToaster("Order is already completed");
                return;
            }
            else {
                IsAllItemSaved = false;
                var count = parseInt($("#ItemInstructionCount").val());
                var instruction = document.getElementById("ItemInstructionText").value;
                orderDetailsModel.itemOrderVM[count].extraInstruction = instruction;
                $(".btn-close").click();
            }
        }

        // Save Order.
        function SaveOrder() {
            if (IsOrderCompleted) {
                callErrorToaster("Order is already completed");
                return;
            }
            else {
                @* console.log("MainItem", MainItem);
                console.log("orderDetailsModel", orderDetailsModel);
                console.log("ItemQuantity", ItemQuantity);
                console.log("OrderDetailIds", OrderDetailIds); *@

                $.ajax({
                    url: "/OrderAppMenu/SaveOrder",
                    type: "POST",
                    data: { OrderDetailIds: JSON.stringify(OrderDetailIds), orderDetails: JSON.stringify(orderDetailsModel) },
                    success: function (data) {
                        $("#OrderDetails-Content").html(data);
                        ItemQuantityUpdateFlag = true;
                        IsAllItemSaved = true;
                        callSuccessToaster("Order Saved Successfully");
                    },
                    error: function (data) {
                        @* console.log(data); *@
                        callErrorToaster("Something went wrong !");
                    }
                });
            }
        }

        // Complete Order
        function CompleteOrder() {

            if (orderDetailsModel.itemOrderVM == null) {
                callErrorToaster("You haven't ordered any item yet !");
                return;
            }

            for (i = 0; i < orderDetailsModel.itemOrderVM.count; i++) {
                if (orderDetailsModel.itemOrderVM[i].status == "Pending") {
                    callErrorToaster("Please Save Order First");
                    return;
                }
            }

            if (!IsAllItemSaved) {
                callErrorToaster("Please Save Orders First")
                return;
            }

            console.log("ids",OrderDetailIds)

            $.ajax({
                url: "/OrderAppMenu/CompleteOrder",
                type: "POST",
                data: { OrderDetailIds: JSON.stringify(OrderDetailIds), orderDetails: JSON.stringify(orderDetailsModel) },
                success: function (data) {
                    if (data.success) {
                        $("#CustomerReviewModal").modal("show");
                        callSuccessToaster("All items are ready to eat!");
                    } else {
                        callErrorToaster("All items are not ready yet !");
                    }
                }
            });
        }

        //complete order details 
        function CompleteOrder() {

            var foodreview = document.getElementsByClassName("food-review-active").length;
            var serviceReview = document.getElementsByClassName("service-review-active").length;
            var ambienceReview = document.getElementsByClassName("ambience-review-active").length;
            var reviewtext = document.getElementById("ReviewText").value;

            console.log(foodreview, "food");

            var paymentmethod = document.getElementsByClassName("payment-type");

            console.log(paymentmethod, "paymentmethod");

            for (i = 0; i < paymentmethod.length; i++) {
                if (paymentmethod[i].checked) {
                    PaymentmethodId = paymentmethod[i].value;
                }
            }

            $.ajax({
                url: "/OrderAppMenu/SaveRatings",
                type: "POST",
                data: { customerId: orderDetailsModel.customerId, foodreview, serviceReview, ambienceReview, reviewtext },
                success: function (data) {
                    orderDetailsModel.RatingId = data;
                    $.ajax({
                        url: "/OrderAppMenu/CompleteOrder",
                        type: "POST",
                        data: { orderDetails: JSON.stringify(orderDetailsModel), PaymentmethodId },
                        success: function (data) {
                            $("#OrderDetails-Content").html(data);
                            ItemQuantityUpdateFlag = true;
                            $(".btn-close").click();
                            IsOrderCompleted = true;
                            callSuccessToaster("Order Completed.")
                            window.location.href = "/OrderAppTable/OrderAppTable"

                        },
                        error: function (data) {
        @* console.log(data); *@
                                callErrorToaster("Something went wrong in inner ho!");
                        }
                    });
                },
                error: function (data) {
        @* console.log(data); *@
                        callErrorToaster("Something went wrong in outer ho!");
                }
            });
        }

        // Edit Review
        function EditReview(type, number) {

            if (IsOrderCompleted) {
                callErrorToaster("Order is already completed");
                return;
            }
            else {

                var StarTags = document.getElementsByClassName(`${type}-review-class`);
                var CheckStarFlag = true;

                for (i = 1; i < StarTags.length; i++) {
                    if (StarTags[i].classList.contains(`${type}-review-active`)) {
                        CheckStarFlag = false;
                        StarTags[i].classList.add("fa-regular");
                        StarTags[i].classList.remove("fa-solid");
                        StarTags[i].classList.remove(`${type}-review-active`);
                    }
                }

                if (number == 1) {
                    var FirstStarTag = document.getElementById(`${type}-review-1`);
                    if (FirstStarTag.classList.contains(`${type}-review-active`) && CheckStarFlag) {
                        FirstStarTag.classList.add("fa-regular");
                        FirstStarTag.classList.remove("fa-solid");
                        FirstStarTag.classList.remove(`${type}-review-active`);
                    }
                    else {
                        FirstStarTag.classList.remove("fa-regular");
                        FirstStarTag.classList.add("fa-solid");
                        FirstStarTag.classList.add(`${type}-review-active`);
                    }
                }
                else {
                    for (i = 1; i <= number; i++) {
                        var StartTag = document.getElementById(`${type}-review-${i}`);
                        StartTag.classList.remove("fa-regular");
                        StartTag.classList.add("fa-solid");
                        StartTag.classList.add(`${type}-review-active`);
                    }
                }
            }
        }

        // READY
        $(document).ready(function () {

            categorySelected(document.getElementsByClassName("category-click")[1], 0);
            GetOrderDetailsByCustomerId();

        });
    </script>
}